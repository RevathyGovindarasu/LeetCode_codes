Solution 1: O(N) time and space.
-----------------------------------------
class Solution {
    public int partitionDisjoint(int[] nums) {
        int[] maxLeft = new int[nums.length];
        int[] minRight = new int[nums.length];
        
        maxLeft[0] = nums[0];
        minRight[nums.length-1] = nums[nums.length-1];
        
        for(int i=1;i<nums.length;i++)
        {
            maxLeft[i] = Math.max(nums[i],maxLeft[i-1]);
            minRight[nums.length-i-1] = Math.min(nums[nums.length-i-1], minRight[nums.length-i]);
        }
        
        for(int i=0;i<nums.length;i++)
            if(maxLeft[i]<=minRight[i+1]) return i+1;
     
        return -1;
    }
}



Solution 2: O(n) time and O(1) space
---------------------------------------------

class Solution {
    public int partitionDisjoint(int[] nums) {
       int max1 = nums[0], index=0, max2 = max1;
        for(int i=1;i<nums.length;i++)
        {
            if(max1>nums[i])
            {
                max1=max2;
                index=i;
            }
            else
                max2=Math.max(max2,nums[i]);
        }
            return index+1;
        
    }
}
